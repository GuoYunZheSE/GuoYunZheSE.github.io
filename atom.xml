<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yunzhe&#39;s Site</title>
  
  
  <link href="http://yunzhe.info/atom.xml" rel="self"/>
  
  <link href="http://yunzhe.info/"/>
  <updated>2021-08-08T12:26:58.567Z</updated>
  <id>http://yunzhe.info/</id>
  
  <author>
    <name>郭蕴喆</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>字节跳动面试题目分析：The Knight’s Dialer</title>
    <link href="http://yunzhe.info/2021/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90%EF%BC%9AThe%20Knight%E2%80%99s%20Dialer/"/>
    <id>http://yunzhe.info/2021/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90%EF%BC%9AThe%20Knight%E2%80%99s%20Dialer/</id>
    <published>2021-08-08T16:03:02.000Z</published>
    <updated>2021-08-08T12:26:58.567Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字节跳动面试题目分析the-knights-dialer">字节跳动面试题目分析：The Knight’s Dialer</h1><blockquote><p>原文翻译自：https://medium.com/<span class="citation" data-cites="alexgolec/google-interview-questions-deconstructed-the-knights-dialer-f780d516f029">@alexgolec/google-interview-questions-deconstructed-the-knights-dialer-f780d516f029</span></p><p>因为字节和Google这个题目一致，而且原博主写得确实很好，所以翻译了一下，为了尊重原博主，采用了全文翻译，下面译文中出现的“我”之类的描述均为原博主的口吻。</p><p>LeetCode题目：类似935</p></blockquote><p><img src="/images/1_7TpBBvl8ZaAWa0Qid7WcvQ.jpeg" /></p><p>这是一系列帖子中的第二篇，我在其中分享了我对科技公司候选人面试的建议，借鉴了我在 Google 担任工程师和面试官的经验。如果您还没有，请查看本系列的<span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BhbGV4Z29sZWMvaW50cm9kdWNpbmctZ29vZ2xlLWludGVydmlldy1xdWVzdGlvbnMtZGVjb25zdHJ1Y3RlZC1hMDEyZTQxZWE2MzE=">介绍<i class="fa fa-external-link-alt"></i></span>。</p><p><em>在我开始之前，有一个免责声明：面试候选人是我的职业职责之一，但这个博客代表了我个人的观察、个人轶事和个人的观点。请不要将此误解为谷歌、Alphabet或任何其他个人或组织的任何官方声明</em></p><p>这是我在面试生涯中遇到的第一个问题，也是第一个因为泄密而被禁止的问题。我喜欢这个题目，因为它满足了很多面试题目应该具有的特征：</p><ul><li>题目易于描述和理解；</li><li>题目有很多不同的解法，每个解法需要不同程度的算法和数据结构的认知水平。同时只需要对题目多一些洞察就可以得到很大的改进；</li><li>每个解法都可以只用相对较少的代码去实现，这使得它非常适合时间受限的环境。</li></ul><p><em>注意，我将用Python编写代码。我喜欢Python，因为它易于学习、紧凑，并且有一个绝对庞大的标准库。应聘者也喜欢它：尽管我们没有语言限制，但我面试的人中有90%使用Python。当然我也使用Python3，拜托，现在已经是2018年了</em>。</p><h2 id="问题描述-the-question">问题描述 The Question</h2><p>想象你把一个骑士棋子放在电话拨号键盘上。此棋子以大写字母“L”形移动（或者说“日”字移动，类似中国象棋里的马）：水平两步后垂直一步，或水平一步后垂直两步：</p><p><img src="/images/1_pE4b3hqGDv7pKivQTQZyPw.png" /></p><p>假设你只使用骑士的移动方式来拨号。每次骑士落在一把数字上，我们输入那个数字然后再移动一次。起始的数字被计为已输入。</p><p>从一个特定的起始位置移动N次，你可以拨多少个不同的号码？</p><h2 id="讨论-discussion">讨论 Discussion</h2><p>我进行的每次面试基本上分为两部分：首先，我们找到一个算法解决方案，然后候选人用代码实现它。我说“我们”找到了一个解决方案，因为我不是一个沉默的旁观者：对于设计和实现任何最佳解决方案的代码，45分钟都不是一个很长的时间，更不用说在压力下了。我让候选人在讨论中起带头作用，产生想法，解决问题的实例，等等，但我非常乐意推动正确的方向。候选人越优秀，我给出的提示就越少，但我还没有看到一个候选人完全不需要我的提示。</p><p>我应该强调这一点，因为这很重要：<u>作为面试官，我不会坐视别人失败。我想写尽可能多的积极反馈，我会给你们机会让我写下关于你的好的评价</u>。提示是我说“好吧，我来给你这一点提示，只有这样你才能继续然后让我看看你对问题的其他部分有什么看法。”</p><p>话虽如此，你听到这个问题后的第一个行动应该是走到白板上，用手去解决这个问题的例子。<em>永远不要直接进入代码！</em>解决实例可以让你发现问题的模式、观察到的和边界的问题，也有助于在你的头脑中形成解决方案。例如，假设从6开始，有两个跃点要跳。你的序列将是：</p><ul><li>6-1-8</li><li>6-1-6</li><li>6-7-2</li><li>6-7-6</li><li>6-0-4</li><li>6-0-6</li></ul><p>总共六个序列。如果你正在跟随这篇文章，请试着用铅笔和纸来推导这些。这并不能很好地转化为一篇博客文章，但当我说手工解决一个问题的神奇之处在于它能带来比仅仅盯着它静静思考更多的见解的时候，请相信我。</p><p>综上所述，你可能已经在脑海中形成了一个解决方案。但在此之前……</p><h2 id="第0层获取下一跳-getting-the-next-hop">第0层：获取下一跳 Getting the Next Hop</h2><p>当我开始使用这个问题的时候，我感到很惊讶的是，候选人在计算我们可以从一个给定位置(也称为邻居)跳转的键时，经常会卡在那里。<strong>我的建议是:当你有疑问的时候，写一个空的占位符，问面试官你是否可以在以后实现它。</strong>这个问题的复杂性并不在于邻近的计算;我注意的不是你的计数水平。任何花费在邻居计算上的时间都被严重浪费。</p><p>我会接受“假设有一个函数可以给我当前号码的邻居”以及下面的函数声明。当然，我可能会要求你稍后返回并实现此功能，但前提是我们有时间。你可以简单地编写这样的函数声明，然后继续：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">neighbors</span>(<span class="params">position:int</span>):</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>另外，请求使用函数头也不会有什么损失：如果问题的复杂性在其他地方，我会允许使用函数头。如果这部分代码牵扯到时间复杂度或者空间复杂度，我会要求你实际实现它。我不介意应聘者没有意识到问题的复杂性，特别是在他们可能没有充分探索问题的早期阶段。</p><p>至于这里的neighbors函数，鉴于它永远不会改变，你可以简单地创建一个map并返回适当的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">NEIGHBORS_MAP = &#123;</span><br><span class="line">    <span class="number">1</span>: (<span class="number">6</span>, <span class="number">8</span>),</span><br><span class="line">    <span class="number">2</span>: (<span class="number">7</span>, <span class="number">9</span>),</span><br><span class="line">    <span class="number">3</span>: (<span class="number">4</span>, <span class="number">8</span>),</span><br><span class="line">    <span class="number">4</span>: (<span class="number">3</span>, <span class="number">9</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="number">5</span>: tuple(),  <span class="comment"># 5 has no neighbors</span></span><br><span class="line">    <span class="number">6</span>: (<span class="number">1</span>, <span class="number">7</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="number">7</span>: (<span class="number">2</span>, <span class="number">6</span>),</span><br><span class="line">    <span class="number">8</span>: (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">    <span class="number">9</span>: (<span class="number">2</span>, <span class="number">4</span>),</span><br><span class="line">    <span class="number">0</span>: (<span class="number">4</span>, <span class="number">6</span>),</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">neighbors</span>(<span class="params">position</span>):</span></span><br><span class="line">    <span class="keyword">return</span> NEIGHBORS_MAP[position]</span><br></pre></td></tr></table></figure><h2 id="第1层递归地产生数字-recursively-generating-numbers">第1层：递归地产生数字 Recursively Generating Numbers</h2><p>好了，我们来看看解决方案。也许你已经注意到这个问题可以通过列举所有可能的数字来解决。你可以使用递归来生成这些值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">yield_sequences</span>(<span class="params">starting_position, num_hops, sequence=None</span>):</span></span><br><span class="line">    <span class="keyword">if</span> sequence <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        sequence = [starting_position]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> num_hops == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">yield</span> sequence</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> neighbor <span class="keyword">in</span> neighbors(starting_position):</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> yield_sequences(</span><br><span class="line">            neighbor, num_hops - <span class="number">1</span>, sequence + [neighbor])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_sequences</span>(<span class="params">starting_position, num_hops</span>):</span></span><br><span class="line">    num_sequences = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> sequence <span class="keyword">in</span> yield_sequences(starting_position, num_hops):</span><br><span class="line">        num_sequences += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> num_sequences</span><br></pre></td></tr></table></figure><p>这是有效的，也是我在采访中看到的一个常见的起点。但是，请注意，我们生成这些数字，但从未实际使用它们。这个问题要求的是数字的计数，而不是数字本身。一旦我们计算了一个数字，我们就不会重新考虑它。作为一个一般的经验法则，我建议注意你的解决方案在什么时候计算出了它没有用到的东西。通常你可以把它剪掉，得到更好的解决方案。我们现在就开始吧。</p><h2 id="第2层不计数而计数-counting-without-counting">第2层：不计数而计数 Counting Without Counting</h2><p>我们如何在不产生电话号码的情况下统计电话号码的数量？这是可以做到的，但没有额外的洞察力是不行的。注意，从一个给定的起始位置生成的N跳数的数量是如何等于从它的每个邻居生成的N-1跳数的总和的。用数学上的递归关系表示，它是这样的:</p><p> $T(P,N) = _{p neighbors}T(P,N-1) $​​​</p><p>当你考虑一跳发生了什么时，这是直观的：6有3个邻居（1, 7，0），在零跳中，你只能到达一个号码，所以你能拨打三个号码。</p><p>你可能会问，一个人是如何得到这种洞察力的?如果你学过递归，在白板上做了一些探索之后，你会发现这一点很明显。许多练习过递归的考生会立即注意到这个问题分解成更小的子问题，这是一个彻底的缺陷。如果我是你的面试官，而你似乎无法领悟到这一点，我通常会给你一些提示，帮助你达到这一点，甚至在你没办法理解我的提示的情况下直接告诉你。</p><p>一旦你掌握了这种洞察力，你就可以继续前进并再次解决这个问题。有许多实现使用了这一方法，但让我们从我在访谈中经常看到的一个开始:简单的递归方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> neighbors <span class="keyword">import</span> neighbors                                 </span><br><span class="line">                                                                </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_sequences</span>(<span class="params">start_position, num_hops</span>):</span>                  </span><br><span class="line">    <span class="keyword">if</span> num_hops == <span class="number">0</span>:                                           </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>                                                </span><br><span class="line">                                                                </span><br><span class="line">    num_sequences = <span class="number">0</span>                                           </span><br><span class="line">    <span class="keyword">for</span> position <span class="keyword">in</span> neighbors(start_position):                  </span><br><span class="line">        num_sequences += count_sequences(position, num_hops - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> num_sequences                                        </span><br><span class="line">                                                                </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:                                      </span><br><span class="line">    print(count_sequences(<span class="number">6</span>, <span class="number">2</span>))     </span><br></pre></td></tr></table></figure><p>就是这样!将其与计算相邻节点的函数结合起来，就得到了一个有效的解决方案!在这一点上，你应该为自己感到自豪。如果你向下滚动，你会发现我们仍然有很多内容要讲，但这一点是一个里程碑。提出任何可行的解决方案都能让你在众多求职者中脱颖而出。</p><p>下一个问题是你们将会从我这里听到很多次的:这个解决方案的Big-O复杂性是什么?对于那些不知道的人来说，Big-O复杂度(通俗地说)是解决方案所需的计算量随输入的大小而增长的速度的一种简写。对于这个问题，输入的大小就是跳数。如果你对正确的数学定义感兴趣，你可以在<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmlnX09fbm90YXRpb24=">这里<i class="fa fa-external-link-alt"></i></span>阅读更多。</p><p>对于这个实现，每次对<code>count_sequences()</code>的调用都至少递归地调用<code>count_sequences()</code>两次，因为每个键至少有两个邻居。由于我们递归的次数等于所需的跳数，并且每次调用<code>count_sequences()</code>的次数至少是两次，因此我们的运行时复杂度至少是<strong>指数级</strong>时间。</p><p>这是不好的。请求额外的跳转将使运行时间加倍(如果不是三倍的话)。对于像1到20这样的小数字，这是可以接受的，但当我们要求越来越大的跳数时，我们就碰壁了。例如，500个跳跃需要在宇宙热死亡后很久才能完成。</p><h2 id="第3层记忆-memoization">第3层：记忆 Memoization</h2><p>我们只使用上面的数学关系能做的更好吗？我喜欢这个问题的一个原因正是，它具有能够产生更多、更有效解决方案的洞察力层次。为了找到下一个，让我们映射出这个函数调用的函数。让我们考虑<code>count_sequences(6,4)</code>的情况。注意，为了简洁起见，我使用<code>C</code>作为函数名:</p><p><img src="/images/1_09ZdC7tkwu4WRkD7zx1wJQ.png" /></p><p>您可能会注意到一些特殊的事情:C(6,2)调用被执行了三次，每次都执行相同的计算，并返回相同的值。这里的关键是这些函数调用是重复的，每次返回相同的值。一旦计算出它们的结果，就不需要重新计算它们了。</p><p>如果你想知道如何得出这个结论，最简单的方法是使用传统的白板:从抽象的角度看问题描述是很好的，但我总是鼓励考生在白板上给出一个示例解决方案。这样解决问题，然后像我上面那样画出这棵树你会注意到你多次写出的<code>C(6,2)</code> 的子树。有时候，这足以让候选人完全绕过解决方案1和2，直接跳到这个阶段。不用说，这在你只有45分钟解决一个问题的面试中节省了大量时间。</p><p>有了这种洞察力，我们该如何解决这个问题呢?我们可以使用memoization (not memo<strong>r</strong>ization)，这基本上意味着我们记录以前见过的函数调用的结果，并使用这些结果，而不是重新计算。这样，当我们在调用图中遇到需要重新计算整个子树的地方时，我们会立即返回已经计算过的结果。这是一个实现:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_sequences</span>(<span class="params">start_position, num_hops</span>):</span></span><br><span class="line">    cache = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span>(<span class="params">position, num_hops</span>):</span></span><br><span class="line">        <span class="keyword">if</span> (position, num_hops) <span class="keyword">in</span> cache:</span><br><span class="line">            <span class="keyword">return</span> cache[ (position, num_hops) ]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> num_hops == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            num_sequences = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> neighbor <span class="keyword">in</span> neighbors(position):</span><br><span class="line">                num_sequences += helper(neighbor, num_hops - <span class="number">1</span>)</span><br><span class="line">            cache[ (position, num_hops) ] = num_sequences</span><br><span class="line">            <span class="keyword">return</span> num_sequences</span><br><span class="line"></span><br><span class="line">    res = helper(start_position, num_hops)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>好了，现在运行时复杂度(Big-O)是多少?这个问题更难回答。对于以前的实现，计算运行的时间就像计算调用递归函数的次数一样简单，每次调用都是两到三次。而这个时间计数更复杂，因为递归调用由条件保护。从表面上看，没有明显的方法来计算函数调用的次数。</p><p>我们可以通过查看缓存来解开这个谜团。每个函数调用的结果都存储在缓存中，并且恰好插入一次。这让我们可以将问题重新定义为“缓存的大小如何随着输入的大小而增长?”假设缓存是由位置和跳数决定的，并且恰好有10个位置，我们可以得出缓存的增长与请求的跳数成正比。这遵循鸽子洞原则:一旦我们在缓存中为每个位置和跳跃计数的组合都有一个条目，所有调用都将击中缓存，而不是导致一个新的函数调用。</p><p>线性时间!这是不坏。事实上，这是值得注意的:添加一个简单的缓存将算法的运行时间从指数变成了线性。在我那备受尊敬的旧MacBook Air上，递归实现运行20次需要大约45秒。这个实现可以在大约50毫秒内处理500个跳跃。还不错。</p><p>我们做完了，对吧?嗯,不完全是。此解决方案有两个缺点，一个（稍微）主要的缺点和一个次要缺点。主要缺点是它是递归的。大多数语言都对调用栈的最大大小进行了限制，这意味着一个实现总是能够支持最大的跳数。在我的机器上，它在大约1000跳后失败。这是一个（稍微）主要的限制，而不是一个主要的限制（这里两个单词分别是major-ish, major），因为任何递归函数都可以以循环的方式重新实现，但它仍然是一个麻烦。至于次要限制，这实际上引导我们进入下一个解决方案…</p><h2 id="第4层动态规划-dynamic-programming">第4层：动态规划 Dynamic Programming</h2><p>当你从上面看递归关系时，递归记忆解决方案的次要限制就很清楚了:</p><p>$T(P,N) = _{p neighbors}T(P,N-1) $</p><p>注意，N跳的结果只依赖于N-1跳的调用的结果。同时，缓存包含每一个(非零)跳数的条目。因为它实际上不会造成任何实际问题，因为缓存只随跳数线性增长，需要线性空间并不是世界末日，所以称它为次要问题，但它仍然是低效的。</p><p>到底发生了什么事?同样，当你查看已写出来的解决方案和代码时，结果是清楚的。注意，代码从最大的跳数开始，然后直接递归到最小的:</p><p><img src="/images/1_56p21hEmBoUMPaudmzWXUQ.png" /></p><p>如果你将整个函数调用图想象成一种虚拟树，你将很快看到我们正在执行深度优先遍历）。这很好，它提供了一个适当的解决方案，但它没有利用我上面指出的浅层依赖属性。</p><p>是否可以执行宽度优先遍历，即从顶部开始并在访问了N个跳跃之后才“访问”N-1个跳跃的函数调用?很遗憾,没有。具有非零跳的函数调用的值绝对需要来自较小跳数的值，所以在到达零跳层并开始返回数字而不是额外的函数调用之前，你不会得到任何结果(注意，图片这里没有描述零跳层)。</p><p>但是，你可以颠倒顺序:只有在访问了具有N-1跳的层之后才访问具有N跳的层。那些学习过或正在学习离散数学的人会认识到<span class="exturl" data-url="aHR0cDovL3d3dy5jcy5jb3JuZWxsLmVkdS9jb3Vyc2VzL2NzMjgwMC8yMDExZmEvTGVjdHVyZXMvaW5kdWN0aW9uLnBkZg==">归纳<i class="fa fa-external-link-alt"></i></span>的所有必要成分:我们知道零跳函数调用的值总是1(基本情况)。我们也知道如何结合N-1跳值得到N跳值，使用递归关系(归纳步骤)。我们可以从一个零跳数的基本情况开始，归纳出所有大于零跳结果的值。这是一个实现:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_sequences</span>(<span class="params">start_position, num_hops</span>):</span>                </span><br><span class="line">    prior_case = [<span class="number">1</span>] * <span class="number">10</span>                                     </span><br><span class="line">    current_case = [<span class="number">0</span>] * <span class="number">10</span>                                   </span><br><span class="line">    current_num_hops = <span class="number">1</span>                                      </span><br><span class="line">                                                              </span><br><span class="line">    <span class="keyword">while</span> current_num_hops &lt;= num_hops:                       </span><br><span class="line">        current_case = [<span class="number">0</span>] * <span class="number">10</span>                               </span><br><span class="line">        current_num_hops += <span class="number">1</span>                                 </span><br><span class="line">                                                              </span><br><span class="line">        <span class="keyword">for</span> position <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>):                         </span><br><span class="line">            <span class="keyword">for</span> neighbor <span class="keyword">in</span> neighbors(position):              </span><br><span class="line">                current_case[position] += prior_case[neighbor]</span><br><span class="line">        prior_case = current_case                             </span><br><span class="line">                                                              </span><br><span class="line">    <span class="keyword">return</span> current_case[start_position]    </span><br></pre></td></tr></table></figure><p>那么，这个版本比递归的、深度优先的解决方案更好的是什么呢?不是很多，但它有一些好处。首先，它不是递归的，这意味着它可以运行非常大的值而不会崩溃。其次，它使用恒定内存，因为它只需要两个大小固定的数组，而不需要不断增长的记忆解决方案的缓存。最后，它仍然是线性时间:我可以在不到20秒的时间内计算20万跳。</p><h2 id="评估">评估</h2><p>我们做完了，对吧?差不多。在求职面试中设计和实现线性时间、常数空间的解决方案是一个很好的结果。当我使用这个题目时，我给那些提供了动态规划解决方案的候选人一个很好的评分。</p><p>你可能会问，其他的解呢?不幸的是，我们不可能评价一个抽象的候选人。面试是一件混乱的事情;他们可能开始得很晚，人们可能会紧张，他们通常在面试中很晚才得出想法和解决方案，这使得他们几乎没有时间编写任何代码。还有一种情况:我关注应聘者表达想法、整合想法和反馈的能力。在做出录用/不录用的推荐之前，我总是会考虑这些因素，你只是不能凭空地这么做。</p><p>我将把重点放在我想说的事情上，而不是潜在的建议。</p><ol type="1"><li><p>在评估算法和数据结构时，我想说一些类似于“候选人探索了这个问题，并产生了一个解决所有边缘情况的解决方案，并在解决方案存在缺点时改进了它。”最后，他们找到了最佳解决方案。”我还希望能够说“候选人为解决方案选择了合适的数据结构，并正确回答了关于他们的解决方案的运行时和空间需求的Big-O问题。”</p></li><li><p>当评估编码时，我的理想陈述是“TC快速而简洁地将他们的想法转化为代码。”代码使用标准语言结构，易于阅读。所有的边缘情况都解决了，TC遍历他们的代码来调试并验证它是正确的。”对于刚入门的候选人，如果有某种测试，我会给予额外的分数，但对于更有经验的角色，如果没有列出相关的测试用例，我会给予惩罚。</p></li><li><p>至于进展的速度，我希望能够这样说:“候选人推动了问题解决过程:他们开发了大部分自己的解决方案，并且能够在我没有指出的情况下发现并解决缺点或候选人只需要一点点提示就能让我们朝正确的方向移动。”</p></li></ol><p>在我的书里，任何我能说出这些话的人都会得到一个“强力录用”。然而，“录用”和“倾向录用”也是积极的支持。如果你在某方面有不足之处，但在另一方面有突出之处，那么我仍然可以给出积极的推荐。</p><h2 id="结束">结束</h2><p>这个问题似乎令人生畏，特别是考虑到这篇文章已经变得如此之长。然而，请记住，这篇文章比任何面试都要详细得多。我并没有列出我所期望看到的所有内容，我只是将问题分解成最细微的细节，不留任何遗漏。</p><p>为此，这里列出了这个问题涵盖的技能和你应该养成的习惯:</p><ol type="1"><li><p><strong>总是从手工解决问题的一个小实例开始</strong></p><p>在这个问题中，当你手工解决一个问题时，递归关系和函数调用的重复变得更加明显。</p></li><li><p><strong>注意你的解决方案什么时候在计算你不需要的东西</strong></p><p>比如简单的计数解决方案如何生成序列，但实际上并没有使用它们。减少不必要的计算通常可以提供更简单的解决方案，如果不能打开通往更高效解决方案的大门的话。</p></li><li><p><strong>知道你的递归</strong></p><p>它在大多数产品代码中几乎没用，因为它会在堆栈中爆炸，但它是一种非常强大的算法设计策略。递归解通常可以适应和改进:指数时间朴素解和线性时间近似最优记忆解之间的差异是最小的。</p></li><li><p><strong>了解你的Big-O分析!</strong></p><p>在面试过程中，你几乎肯定会被问到这个问题。</p></li></ol><p>永远要寻找记忆的机会。如果您的函数是确定性的，并且您将使用相同的输入多次调用它，那么您的解决方案可能会受益于记忆。</p><p>找出并写出递归关系。在这种情况下，把它写出来很明显，N跳的计数只依赖于N-1跳的计数。</p><p>如果你喜欢这篇文章，鼓掌或者留言!没有什么比收到读者来信更让我感到温暖和模糊的了。此外，如果这是你喜欢读的东西，如果你一直在这里，很有可能它是，给我一个追随!还有很多事情要做。</p><p>但是等等，还有更多!</p><p>好了，我说我们做完了，但结果是这个问题还有一个解。在我采访这个问题的所有时间里，我从未见过有人提供这个问题。我甚至都不知道它的存在，直到我的一位同事带着一脸震惊的表情走到他的办公桌前，宣布他刚刚面试了他所见过的最好的候选人。</p><p>我将很快发布详细的后续内容，但与此同时，我将让大家思考如何在对数时间内解决这个问题……</p><h2 id="对数时间版本-logarithmic-time-edition">对数时间版本 Logarithmic Time Edition</h2><p>https://alexgolec.dev/knights-dialer-logarithmic-time-edition/</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;字节跳动面试题目分析the-knights-dialer&quot;&gt;字节跳动面试题目分析：The Knight’s Dialer&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;原文翻译自：https://medium.com/&lt;span class=&quot;citation&quot; da</summary>
      
    
    
    
    <category term="Interview" scheme="http://yunzhe.info/categories/Interview/"/>
    
    
    <category term="Dynamic Programming" scheme="http://yunzhe.info/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>55. Jump Game</title>
    <link href="http://yunzhe.info/2021/Jump%20Game/"/>
    <id>http://yunzhe.info/2021/Jump%20Game/</id>
    <published>2021-01-18T16:17:12.000Z</published>
    <updated>2021-01-25T06:35:36.393Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jump-game">55. Jump Game</h1><blockquote><p>Medium</p></blockquote><h2 id="题目描述">题目描述</h2><p>Given an array of non-negative integers <code>nums</code>, you are initially positioned at the <strong>first index</strong> of the array.</p><p>Each element in the array represents your maximum jump length at that position.</p><p>Determine if you are able to reach the last index.</p><p><a id="more"></a></p><p><strong>Example 1:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Input:</span> <span class="string">nums</span> <span class="string">=</span> [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>]</span><br><span class="line"><span class="attr">Output:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">Explanation:</span> <span class="string">Jump</span> <span class="number">1</span> <span class="string">step</span> <span class="string">from</span> <span class="string">index</span> <span class="number">0</span> <span class="string">to</span> <span class="number">1</span><span class="string">,</span> <span class="string">then</span> <span class="number">3</span> <span class="string">steps</span> <span class="string">to</span> <span class="string">the</span> <span class="string">last</span> <span class="string">index.</span></span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Input:</span> <span class="string">nums</span> <span class="string">=</span> [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>]</span><br><span class="line"><span class="attr">Output:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">Explanation:</span> <span class="string">You</span> <span class="string">will</span> <span class="string">always</span> <span class="string">arrive</span> <span class="string">at</span> <span class="string">index</span> <span class="number">3</span> <span class="literal">no</span> <span class="string">matter</span> <span class="string">what.</span> <span class="string">Its</span> <span class="string">maximum</span> <span class="string">jump</span> <span class="string">length</span> <span class="string">is</span> <span class="number">0</span><span class="string">,</span> <span class="string">which</span> <span class="string">makes</span> <span class="string">it</span> <span class="string">impossible</span> <span class="string">to</span> <span class="string">reach</span> <span class="string">the</span> <span class="string">last</span> <span class="string">index.</span></span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li><li><code>0 &lt;= nums[i] &lt;= 105</code></li></ul><h2 id="解决方案">解决方案</h2><blockquote><p>https://leetcode.com/problems/jump-game/solution/</p></blockquote><h3 id="命名">命名</h3><p><strong>&quot;good index&quot;</strong> ：从该点开始，可以让我们到达最后一个点。</p><p><strong>&quot;bad index&quot;</strong>：与上述相反</p><h4 id="思路和代码">思路和代码</h4><p>这是一个动态规划的问题，通常情况下，解决并充分理解需要以下四个步骤：</p><ol type="1"><li>使用backtracking的递归方法解决</li><li>通过使用缓存表来优化(Top-Down DP)</li><li>通过(Botton-Up DP)来移除递归</li><li>再进行一些细节的优化</li></ol><p>以下代码均可以AC，但是时间和空间效率有所不同</p><h5 id="backtracking">Backtracking</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Backtracking</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canJump</span>(<span class="params">self, nums: [int]</span>) -&gt; bool:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">subJump</span>(<span class="params">position:int, nums:[int]</span>):</span></span><br><span class="line">            <span class="keyword">if</span> position==len(nums)<span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            furthest=min(len(nums)<span class="number">-1</span>,position+nums[position])</span><br><span class="line">            <span class="keyword">for</span> nextPosition <span class="keyword">in</span> range(position+<span class="number">1</span>, furthest+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> subJump(nextPosition,nums):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> subJump(<span class="number">0</span>,nums)</span><br></pre></td></tr></table></figure><p>对于上述代码，我们最先想到的优化方法是<strong>从右向左</strong>寻找我们的<em>nextPosition</em>，尽管整个算法的平均时间复杂度没变，但是我们却改善了最差情况下的运行情况，直观上讲，这种方法可以使我们寻找可以尽快抵达终点的jump。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Backtracking-2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canJump</span>(<span class="params">self, nums: [int]</span>) -&gt; bool:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">subJump</span>(<span class="params">position:int, nums:[int]</span>):</span></span><br><span class="line">            <span class="keyword">if</span> position==len(nums)<span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            furthest=min(len(nums)<span class="number">-1</span>,position+nums[position])</span><br><span class="line">            <span class="keyword">for</span> nextPosition <span class="keyword">in</span> range(furthest,position<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">                <span class="keyword">if</span> subJump(nextPosition,nums):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> subJump(<span class="number">0</span>,nums)</span><br></pre></td></tr></table></figure><p>以下表为例，如果我们从0索引处出发，尽力跳到了1，然后尽力跳到了6，通过如此，我们跳了3次确定了0可以到达终点。</p><table><thead><tr class="header"><th style="text-align: center;">Index</th><th style="text-align: center;">0</th><th style="text-align: center;">1</th><th style="text-align: center;">2</th><th style="text-align: center;">3</th><th style="text-align: center;">4</th><th style="text-align: center;">5</th><th style="text-align: center;">6</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">nums</td><td style="text-align: center;">1</td><td style="text-align: center;">5</td><td style="text-align: center;">2</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">2</td><td style="text-align: center;">0</td></tr></tbody></table><p>下表所示为算法的最坏情况，我们的优化没有起到作用，在下表的情况中，我们尝试了所有的组合，最终证明任何一个点都无法到达终点。</p><table><thead><tr class="header"><th style="text-align: center;">Index</th><th style="text-align: center;">0</th><th style="text-align: center;">1</th><th style="text-align: center;">2</th><th style="text-align: center;">3</th><th style="text-align: center;">4</th><th style="text-align: center;">5</th><th style="text-align: center;">6</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">nums</td><td style="text-align: center;">5</td><td style="text-align: center;">4</td><td style="text-align: center;">3</td><td style="text-align: center;">2</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">0</td></tr></tbody></table><p>部分路径为: 0 -&gt; 4 -&gt; 5 -&gt; 4 -&gt; 0 -&gt; 3 -&gt; 5 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; etc.</p><h6 id="复杂度分析">复杂度分析</h6><ul><li>时间复杂度 : <span class="math inline">\(O(2^n)\)</span> .最差情况即需要<span class="math inline">\(2^n\)</span>次跳跃才能到达终点。</li><li>空间复杂度 : <span class="math inline">\(O(n)\)</span>.递归需要额外的空间开销。</li></ul><h5 id="dynamic-programming">Dynamic Programming</h5><p>自上而下的动态规划可以看做方法一的一个优化版本，我们可以注意到一旦我们发现一个点是好点还是坏点，在之后的过程中，他们的这个状态将永远不会被改变。因此我们可以保存计算结果，没有必要每次都重新计算。</p><p>正因如此，对于数组中的每一个位置，我们都可以记住该位置是好点还是坏点。我们将记忆数组成为<code>memo</code>,其中的值分别为:GOOD, BAD, UNKNOWN. 这种技术被称为记忆。</p><p>以下表为例 <code>nums = [2, 4, 2, 1, 0, 2, 0]</code>，G表示好点，B表示坏点，我们可以发现我们不可以从2、3、4到达终点，然而我们可以从0、1、5、6到达终点。</p><table><thead><tr class="header"><th style="text-align: center;">Index</th><th style="text-align: center;">0</th><th style="text-align: center;">1</th><th style="text-align: center;">2</th><th style="text-align: center;">3</th><th style="text-align: center;">4</th><th style="text-align: center;">5</th><th style="text-align: center;">6</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">nums</td><td style="text-align: center;">2</td><td style="text-align: center;">4</td><td style="text-align: center;">2</td><td style="text-align: center;">1</td><td style="text-align: center;">0</td><td style="text-align: center;">2</td><td style="text-align: center;">0</td></tr><tr class="even"><td style="text-align: center;">memo</td><td style="text-align: center;">G</td><td style="text-align: center;">G</td><td style="text-align: center;">B</td><td style="text-align: center;">B</td><td style="text-align: center;">B</td><td style="text-align: center;">G</td><td style="text-align: center;">G</td></tr></tbody></table><p>算法流程：</p><ol type="1"><li>除了最后一个点，将<code>memo</code>中的所有其他点初始化为UNKNOWN，最后一个点的值为GOOD。</li><li>修改算法一，使得递归的每一步都会检查该点的状态：<ol type="1"><li>如果该点已知，则返回对应的True/False</li><li>否则像算法一一样执行</li></ol></li><li>一旦我们确定了当前点的状态，我们将其储存在<code>memo</code>里</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DP: Top-Down</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canJump</span>(<span class="params">self, nums: [int]</span>) -&gt; bool:</span></span><br><span class="line">        memo=[<span class="number">0</span>]*len(nums)</span><br><span class="line">        memo[<span class="number">-1</span>]=<span class="number">1</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">subJump</span>(<span class="params">position:int, nums:[int]</span>):</span></span><br><span class="line">            <span class="keyword">if</span> memo[position]!=<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> memo[position]==<span class="number">1</span></span><br><span class="line">            furthest=min(len(nums)<span class="number">-1</span>,position+nums[position])</span><br><span class="line">            <span class="keyword">for</span> nextPosition <span class="keyword">in</span> range(position+<span class="number">1</span>,furthest+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> subJump(nextPosition,nums):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> subJump(<span class="number">0</span>,nums)</span><br></pre></td></tr></table></figure><p>通过替换掉递归的使用，我们可以实现Bottom-Up形式的动态规划算法，在实际应用中，由于不需要额外的函数栈空间，我们往往可以获得更好的性能。更重要的是，这种算法为我们后续的优化提供了可能。</p><p>我们可以观察到，我们只需要跳到数组的右边，也就是说如果我们从数组的右边出发，每次我们选择一个位置进行计算，该位置已经被确实是好点还是坏点。因此，我们不再需要迭代，因为算法总是会命中<code>memo</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DP: Bottom-Up</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canJump</span>(<span class="params">self, nums: [int]</span>) -&gt; bool:</span></span><br><span class="line">        memo=[<span class="number">0</span>]*len(nums)</span><br><span class="line">        memo[<span class="number">-1</span>]=<span class="number">1</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">subJump</span>(<span class="params">position:int, nums:[int]</span>):</span></span><br><span class="line">            <span class="keyword">if</span> memo[position]!=<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> memo[position]==<span class="number">1</span></span><br><span class="line">            furthest=min(len(nums)<span class="number">-1</span>,position+nums[position])</span><br><span class="line">            <span class="keyword">for</span> nextPosition <span class="keyword">in</span> range(position+<span class="number">1</span>,furthest+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> subJump(nextPosition,nums):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> subJump(<span class="number">0</span>,nums)</span><br></pre></td></tr></table></figure><h6 id="复杂度分析-1">复杂度分析</h6><ul><li>时间复杂度 : <span class="math inline">\(O(n^2)\)</span> .最差情况即需要<span class="math inline">\(2^n\)</span>次跳跃才能到达终点。</li><li>空间复杂度 : <span class="math inline">\(O(n)\)</span>.<code>memo</code>的使用</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;jump-game&quot;&gt;55. Jump Game&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Medium&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;Given an array of non-negative integers &lt;code&gt;nums&lt;/code&gt;, you are initially positioned at the &lt;strong&gt;first index&lt;/strong&gt; of the array.&lt;/p&gt;
&lt;p&gt;Each element in the array represents your maximum jump length at that position.&lt;/p&gt;
&lt;p&gt;Determine if you are able to reach the last index.&lt;/p&gt;
&lt;p&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://yunzhe.info/categories/LeetCode/"/>
    
    
    <category term="Dynamic Programming" scheme="http://yunzhe.info/tags/Dynamic-Programming/"/>
    
    <category term="Greedy" scheme="http://yunzhe.info/tags/Greedy/"/>
    
  </entry>
  
  <entry>
    <title>不需要密码，手动生成Django Simple JWT</title>
    <link href="http://yunzhe.info/2020/Generate%20Django%20SImple%20JWT%20Manually/"/>
    <id>http://yunzhe.info/2020/Generate%20Django%20SImple%20JWT%20Manually/</id>
    <published>2020-11-11T20:06:12.000Z</published>
    <updated>2021-01-08T08:16:55.164Z</updated>
    
    <content type="html"><![CDATA[<p>​ 在后台开发的过程中，由于客户有跨系统自动登录用户的需求，在没有SSO系统的情况下，考虑使用生成指定用户的JWT的方式来达成免密码登录的效果，其中遇到了<code>Given token not valid for any token type</code>等错误。</p><a id="more"></a><p>​ 在StackOverflow上我查到了以下回答：</p><blockquote><p>From: https://stackoverflow.com/a/27532341/12375515</p><p>When working with Django REST Framework JWT, it is typically expected that the user is generating the token on their own. Because you are generating the token on behalf of the user, you can't use any of the standard views to make it work.</p><p>You are going to need to generate the token on your own, similar to <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dldEJsaW1wL2RqYW5nby1yZXN0LWZyYW1ld29yay1qd3QvYmxvYi80NzdkNTg4N2FiYmJjZTdhOWQxMWRjODI3ZDk1NDk3MGQ3YzY2YmQ3L3Jlc3RfZnJhbWV3b3JrX2p3dC9zZXJpYWxpemVycy5weSNMNTUtTDY2">how DRF JWT does it<i class="fa fa-external-link-alt"></i></span> in the views. This means using something like the following for your view code</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework_jwt.settings <span class="keyword">import</span> api_settings</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">jwt_payload_handler = api_settings.JWT_PAYLOAD_HANDLER</span><br><span class="line">jwt_encode_handler = api_settings.JWT_ENCODE_HANDLER</span><br><span class="line"></span><br><span class="line">my_user = User.objects.get(pk=<span class="number">1</span>) <span class="comment"># replace with your existing logic</span></span><br><span class="line"></span><br><span class="line">payload = jwt_payload_handler(my_user)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Include original issued at time for a brand new token,</span></span><br><span class="line"><span class="comment"># to allow token refresh</span></span><br><span class="line"><span class="keyword">if</span> api_settings.JWT_ALLOW_REFRESH:</span><br><span class="line">    payload[<span class="string">&#x27;orig_iat&#x27;</span>] = timegm(</span><br><span class="line">        datetime.utcnow().utctimetuple()</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="string">&#x27;token&#x27;</span>: jwt_encode_handler(payload)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>​ 按照他的方法，我把我的代码改成了如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">autoLogin</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        res = &#123;</span><br><span class="line">            <span class="string">&quot;code&quot;</span>: <span class="number">20000</span>,</span><br><span class="line">            <span class="string">&quot;message&quot;</span>: <span class="string">&quot;获取用户信息成功&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = request.data</span><br><span class="line">            ST = SysTokenSerializer(models.SysToken.objects.filter(id=data[<span class="string">&#x27;SysID&#x27;</span>]), many=<span class="literal">True</span>)</span><br><span class="line">            <span class="comment"># 子系统验证</span></span><br><span class="line">            <span class="keyword">if</span> ST.data[<span class="number">0</span>][<span class="string">&#x27;SysToken&#x27;</span>] != data[<span class="string">&#x27;SysToken&#x27;</span>]:</span><br><span class="line">                <span class="keyword">raise</span> Exception(<span class="string">&quot;SysToken不合法&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 获取用户ID</span></span><br><span class="line">                SysUserId = data[<span class="string">&#x27;SysUserId&#x27;</span>]</span><br><span class="line">                jwt_payload_handler = api_settings.JWT_PAYLOAD_HANDLER</span><br><span class="line">                jwt_encode_handler = api_settings.JWT_ENCODE_HANDLER</span><br><span class="line"></span><br><span class="line">                user = models.User.objects.get(id=SysUserId)  <span class="comment"># replace with your existing logic</span></span><br><span class="line"></span><br><span class="line">                payload = jwt_payload_handler(user)</span><br><span class="line">                <span class="keyword">if</span> api_settings.JWT_ALLOW_REFRESH:</span><br><span class="line">                    payload[<span class="string">&#x27;orig_iat&#x27;</span>] = timegm(</span><br><span class="line">                        datetime.utcnow().utctimetuple()</span><br><span class="line">                    )</span><br><span class="line">                token = jwt_encode_handler(payload)</span><br><span class="line">                res[<span class="string">&#x27;refresh&#x27;</span>] = token</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            res[<span class="string">&quot;code&quot;</span>] = <span class="number">-1</span></span><br><span class="line">            res[<span class="string">&quot;message&quot;</span>] = <span class="string">f&quot;获取用户信息失败, <span class="subst">&#123;e&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">return</span> Response(res)</span><br></pre></td></tr></table></figure><p>​ 成功生成了用户对应的Token，可是使用该Token时发现如下错误：&quot;Token has no id&quot;</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;detail&quot;</span>: <span class="string">&quot;Given token not valid for any token type&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="string">&quot;token_not_valid&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;messages&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token_class&quot;</span>: <span class="string">&quot;AccessToken&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;token_type&quot;</span>: <span class="string">&quot;access&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;Token has no id&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ 查阅Simple JWT源码发现，需要添加<code>jti</code>进入<code>payload</code>:<code>payload['jti'] = uuid.uuid4().hex</code></p><p>​ 再次生成Token进行测试，出现如下错误：&quot;Token has no type&quot;</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;detail&quot;</span>: <span class="string">&quot;Given token not valid for any token type&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="string">&quot;token_not_valid&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;messages&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token_class&quot;</span>: <span class="string">&quot;AccessToken&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;token_type&quot;</span>: <span class="string">&quot;access&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;Token has no type&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ 进一步添加:<code>payload['token_type']='access'</code>，最终JWT验证通过，用户正常登入系统。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​ 在后台开发的过程中，由于客户有跨系统自动登录用户的需求，在没有SSO系统的情况下，考虑使用生成指定用户的JWT的方式来达成免密码登录的效果，其中遇到了&lt;code&gt;Given token not valid for any token type&lt;/code&gt;等错误。&lt;/p&gt;</summary>
    
    
    
    <category term="后台" scheme="http://yunzhe.info/categories/%E5%90%8E%E5%8F%B0/"/>
    
    
    <category term="Django" scheme="http://yunzhe.info/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Viewer IP maps for Next 8.0</title>
    <link href="http://yunzhe.info/2020/Viewer%20IP%20maps%20for%20Next%208.0/"/>
    <id>http://yunzhe.info/2020/Viewer%20IP%20maps%20for%20Next%208.0/</id>
    <published>2020-10-12T13:16:52.000Z</published>
    <updated>2020-10-12T06:45:46.403Z</updated>
    
    <content type="html"><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9saW5rcy5qaWFuc2h1LmNvbS9nbz90bz1odHRwcyUzQSUyRiUyRmNsdXN0cm1hcHMuY29t">clustrmaps.com<i class="fa fa-external-link-alt"></i></span> 是美国的一家数据网站，能够汇总公共记录来分析美国城市的社会人口和商业环境。</p><blockquote><p>Add the ClustrMaps hit tracker to your site or blog and see a real-time map of your visitors from around the world! Proudly show and grow your hidden community of interest.</p></blockquote><p>网址提供了生成访问者地址分布图的代码，可以嵌入到网站或博客中，来显示来自世界各地访问者的实时地图，有助于发展您隐藏的兴趣社区。最重要的是，这个功能是<strong>免费</strong>的，能够满足个人网站的需求。</p><p>注册登录之后，将<code>/themes/next/layout/_macro/sidebar.njk</code>修改如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#123;% macro render(display_toc) %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toggle sidebar-toggle&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;toggle-line&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;toggle-line&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;toggle-line&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span></span><br><span class="line">    &#123;%- set display_toc = page.toc.enable and display_toc %&#125;</span><br><span class="line">    &#123;%- if display_toc %&#125;</span><br><span class="line">      &#123;%- set toc = toc(page.content, &#123; class: &quot;nav&quot;, list_number: page.toc.number, max_depth: page.toc.max_depth &#125;) %&#125;</span><br><span class="line">      &#123;%- set display_toc = toc.length &gt; 1 and display_toc %&#125;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-inner &#123;% if display_toc %&#125;sidebar-nav-active sidebar-toc-active&#123;% else %&#125;sidebar-overview-active&#123;% endif %&#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-nav-toc&quot;</span>&gt;</span></span><br><span class="line">          &#123;&#123; __(&#x27;sidebar.toc&#x27;) &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-nav-overview&quot;</span>&gt;</span></span><br><span class="line">          &#123;&#123; __(&#x27;sidebar.overview&#x27;) &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--noindex--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;post-toc-wrap sidebar-panel&quot;</span>&gt;</span></span><br><span class="line">        &#123;%- if display_toc %&#125;</span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;post-toc animated&quot;</span>&gt;</span>&#123;&#123; toc &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;%- endif %&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--/noindex--&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;site-overview-wrap sidebar-panel&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; partial(&#x27;_partials/sidebar/site-overview.njk&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">        &#123;&#123;- next_inject(&#x27;sidebar&#x27;) &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      &#123;%- if theme.back2top.enable and theme.back2top.sidebar %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;back-to-top animated&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-arrow-up&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>0%<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      &#123;%- endif %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">id</span>=<span class="string">&quot;clstr_globe&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//clustrmaps.com/globe.js?d=插入网站给出的代码&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-dimmer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endmacro %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最终结果如图所示：</p><p><img src="/images/image-20201012132342318.png" alt="image-20201012132342318" style="zoom:50%;" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9saW5rcy5qaWFuc2h1LmNvbS9nbz90bz1odHRwcyUzQSUyRiUyRmNsdXN0cm1hcHMuY29t&quot;&gt;clustrmaps.com&lt;i class=&quot;</summary>
      
    
    
    
    <category term="Blog" scheme="http://yunzhe.info/categories/Blog/"/>
    
    
    <category term="Next" scheme="http://yunzhe.info/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>Django自定义多用户类</title>
    <link href="http://yunzhe.info/2020/Django%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A4%9A%E7%94%A8%E6%88%B7%E7%B1%BB%E6%97%A0%E6%B3%95%E4%BA%A7%E7%94%9F%E7%94%A8%E6%88%B7%E8%A1%A8/"/>
    <id>http://yunzhe.info/2020/Django%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A4%9A%E7%94%A8%E6%88%B7%E7%B1%BB%E6%97%A0%E6%B3%95%E4%BA%A7%E7%94%9F%E7%94%A8%E6%88%B7%E8%A1%A8/</id>
    <published>2020-10-10T22:06:52.000Z</published>
    <updated>2020-11-11T12:05:38.214Z</updated>
    
    <content type="html"><![CDATA[<p>最近接了一个项目，打算用<code>Django+Vue</code>的方式去搭建一个网站.</p><p>由于网站的使用用户分为两类，因此决定使用<code>OneToOneField</code>的方法去自定义用户类.</p><p>具体代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># File: /core/modles.py</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">AbstractUser</span>):</span></span><br><span class="line">    user_type = models.IntegerField()</span><br><span class="line">    user_mobile = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LegalPersonTable</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    User = models.OneToOneField(<span class="string">&#x27;core.User&#x27;</span>, on_delete=models.CASCADE, primary_key=<span class="literal">True</span>)</span><br><span class="line">    company_name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    unified_social_credit_code = models.CharField(max_length=<span class="number">18</span>)</span><br><span class="line">    legal_person_name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    legal_person_mobile = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    legal_person_certification_type = models.IntegerField()</span><br><span class="line">    legal_person_certification_number = models.CharField(max_length=<span class="number">255</span>)</span><br><span class="line">    corresponding_person_name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    corresponding_person_mobile = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    legal_person_idcard_front_url = models.CharField(max_length=<span class="number">255</span>)</span><br><span class="line">    legal_person_idcard_back_url = models.CharField(max_length=<span class="number">255</span>)</span><br><span class="line">    business_license_url = models.CharField(max_length=<span class="number">255</span>)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;legal_person_table&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NaturalPersonTable</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    User = models.OneToOneField(<span class="string">&#x27;core.User&#x27;</span>, models.CASCADE, primary_key=<span class="literal">True</span>)</span><br><span class="line">    real_name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    idcard_number = models.CharField(max_length=<span class="number">18</span>)</span><br><span class="line">    idcard_front_url = models.CharField(max_length=<span class="number">255</span>)</span><br><span class="line">    idcard_back_url = models.CharField(max_length=<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;natural_person_table&#x27;</span></span><br></pre></td></tr></table></figure><p>在这里需要注意的是，如果发现运行正常，但是数据库没有改动的话：</p><blockquote><p><strong>Meta 的 managed属性</strong></p><p>由于Django会自动根据模型类生成映射的数据库表，如果你不希望Django这么做，可以把managed的值设置为False。</p><p>默认值为True,这个选项为True时Django可以对数据库表进行 migrate或migrations、删除等操作。在这个时间Django将管理数据库中表的生命周期</p><p>如果为False的时候，不会对数据库表进行创建、删除等操作。可以用于现有表、数据库视图等，其他操作是一样的。</p></blockquote><ol type="1"><li><p>在<code>setting.py</code>中增加<code>AUTH_USER_MODEL = 'core.User'</code></p></li><li><p>需要在<code>admin.py</code>中进行注册：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">admin.site.register(User, UserAdmin)</span><br><span class="line">admin.site.register(NaturalPersonTable)</span><br><span class="line">admin.site.register(LegalPersonTable)</span><br></pre></td></tr></table></figure></li><li>一步一步执行：<ol type="1"><li><p><code>python manage.py makemigrations core</code>显示正常</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Migrations <span class="keyword">for</span> <span class="string">&#x27;core&#x27;</span>:</span><br><span class="line">  core/migrations/0001_initial.py</span><br><span class="line">    - Create model User</span><br><span class="line">    - Create model LegalPersonTable</span><br><span class="line">    - Create model NaturalPersonTable</span><br><span class="line">(Spider) </span><br></pre></td></tr></table></figure></li><li><p><code>python manage.py sqlmigrate core 0001</code>同样显示正常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">--</span><br><span class="line">-- Create model User</span><br><span class="line">--</span><br><span class="line">CREATE TABLE &#96;core_user&#96; (&#96;id&#96; integer AUTO_INCREMENT NOT NULL PRIMARY KEY, &#96;password&#96; varchar(128) NOT NULL, &#96;last_login&#96; datetime(6) NULL, &#96;is_superuser&#96; bool NOT NULL, &#96;username&#96; varchar(150) NOT NULL UNIQUE, &#96;first_name&#96; varchar(150) NOT NULL, &#96;last_name&#96; varchar(150) NOT NULL, &#96;email&#96; varchar(254) NOT NULL, &#96;is_staff&#96; bool NOT NULL, &#96;is_active&#96; bool NOT NULL, &#96;date_joined&#96; datetime(6) NOT NULL, &#96;user_type&#96; integer NOT NULL, &#96;user_mobile&#96; varchar(20) NOT NULL);</span><br><span class="line">CREATE TABLE &#96;core_user_groups&#96; (&#96;id&#96; integer AUTO_INCREMENT NOT NULL PRIMARY KEY, &#96;user_id&#96; integer NOT NULL, &#96;group_id&#96; integer NOT NULL);</span><br><span class="line">CREATE TABLE &#96;core_user_user_permissions&#96; (&#96;id&#96; integer AUTO_INCREMENT NOT NULL PRIMARY KEY, &#96;user_id&#96; integer NOT NULL, &#96;permission_id&#96; integer NOT NULL);</span><br><span class="line">--</span><br><span class="line">-- Create model LegalPersonTable</span><br><span class="line">--</span><br><span class="line">CREATE TABLE &#96;legal_person_table&#96; (&#96;User_id&#96; integer NOT NULL PRIMARY KEY, &#96;company_name&#96; varchar(100) NOT NULL, &#96;unified_social_credit_code&#96; varchar(18) NOT NULL, &#96;legal_person_name&#96; varchar(50) NOT NULL, &#96;legal_person_mobile&#96; varchar(20) NOT NULL, &#96;legal_person_certification_type&#96; integer NOT NULL, &#96;legal_person_certification_number&#96; varchar(255) NOT NULL, &#96;corresponding_person_name&#96; varchar(50) NOT NULL, &#96;corresponding_person_mobile&#96; varchar(20) NOT NULL, &#96;legal_person_idcard_front_url&#96; varchar(255) NOT NULL, &#96;legal_person_idcard_back_url&#96; varchar(255) NOT NULL, &#96;business_license_url&#96; varchar(255) NOT NULL);</span><br><span class="line">--</span><br><span class="line">-- Create model NaturalPersonTable</span><br><span class="line">--</span><br><span class="line">CREATE TABLE &#96;natural_person_table&#96; (&#96;User_id&#96; integer NOT NULL PRIMARY KEY, &#96;real_name&#96; varchar(100) NOT NULL, &#96;idcard_number&#96; varchar(18) NOT NULL, &#96;idcard_front_url&#96; varchar(255) NOT NULL, &#96;idcard_back_url&#96; varchar(255) NOT NULL);</span><br><span class="line">ALTER TABLE &#96;core_user_groups&#96; ADD CONSTRAINT &#96;core_user_groups_user_id_group_id_c82fcad1_uniq&#96; UNIQUE (&#96;user_id&#96;, &#96;group_id&#96;);</span><br><span class="line">ALTER TABLE &#96;core_user_groups&#96; ADD CONSTRAINT &#96;core_user_groups_user_id_70b4d9b8_fk_core_user_id&#96; FOREIGN KEY (&#96;user_id&#96;) REFERENCES &#96;core_user&#96; (&#96;id&#96;);</span><br><span class="line">ALTER TABLE &#96;core_user_groups&#96; ADD CONSTRAINT &#96;core_user_groups_group_id_fe8c697f_fk_auth_group_id&#96; FOREIGN KEY (&#96;group_id&#96;) REFERENCES &#96;auth_group&#96; (&#96;id&#96;);</span><br><span class="line">ALTER TABLE &#96;core_user_user_permissions&#96; ADD CONSTRAINT &#96;core_user_user_permissions_user_id_permission_id_73ea0daa_uniq&#96; UNIQUE (&#96;user_id&#96;, &#96;permission_id&#96;);</span><br><span class="line">ALTER TABLE &#96;core_user_user_permissions&#96; ADD CONSTRAINT &#96;core_user_user_permissions_user_id_085123d3_fk_core_user_id&#96; FOREIGN KEY (&#96;user_id&#96;) REFERENCES &#96;core_user&#96; (&#96;id&#96;);</span><br><span class="line">ALTER TABLE &#96;core_user_user_permissions&#96; ADD CONSTRAINT &#96;core_user_user_permi_permission_id_35ccf601_fk_auth_perm&#96; FOREIGN KEY (&#96;permission_id&#96;) REFERENCES &#96;auth_permission&#96; (&#96;id&#96;);</span><br><span class="line">ALTER TABLE &#96;legal_person_table&#96; ADD CONSTRAINT &#96;legal_person_table_User_id_9bc58715_fk_core_user_id&#96; FOREIGN KEY (&#96;User_id&#96;) REFERENCES &#96;core_user&#96; (&#96;id&#96;);</span><br><span class="line">ALTER TABLE &#96;natural_person_table&#96; ADD CONSTRAINT &#96;natural_person_table_User_id_72171d3a_fk_core_user_id&#96; FOREIGN KEY (&#96;User_id&#96;) REFERENCES &#96;core_user&#96; (&#96;id&#96;);</span><br><span class="line">(Spider) </span><br></pre></td></tr></table></figure></li><li><p><code>python manage.py migrate</code>即可</p></li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近接了一个项目，打算用&lt;code&gt;Django+Vue&lt;/code&gt;的方式去搭建一个网站.&lt;/p&gt;
&lt;p&gt;由于网站的使用用户分为两类，因此决定使用&lt;code&gt;OneToOneField&lt;/code&gt;的方法去自定义用户类.&lt;/p&gt;
&lt;p&gt;具体代码如下:&lt;/p&gt;
&lt;figur</summary>
      
    
    
    
    <category term="后台" scheme="http://yunzhe.info/categories/%E5%90%8E%E5%8F%B0/"/>
    
    
    <category term="Django" scheme="http://yunzhe.info/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yunzhe.info/2020/hello-world/"/>
    <id>http://yunzhe.info/2020/hello-world/</id>
    <published>2020-10-08T13:30:57.836Z</published>
    <updated>2020-10-09T13:37:23.106Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==">Hexo<i class="fa fa-external-link-alt"></i></span>! This is your very first post. Check <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv">documentation<i class="fa fa-external-link-alt"></i></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=">troubleshooting<i class="fa fa-external-link-alt"></i></span> or you can ask me on <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==">GitHub<i class="fa fa-external-link-alt"></i></span>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s">Writing<i class="fa fa-external-link-alt"></i></span></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=">Server<i class="fa fa-external-link-alt"></i></span></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s">Generating<i class="fa fa-external-link-alt"></i></span></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s">Deployment<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9oZXhvLmlvLw==&quot;&gt;Hexo&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;! This is your very</summary>
      
    
    
    
    
  </entry>
  
</feed>
